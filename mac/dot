#!/usr/bin/env perl5.30
#  ____        _    __ _ _           
# |  _ \  ___ | |_ / _(_) | ___  ___ 
# | | | |/ _ \| __| |_| | |/ _ \/ __|
# | |_| | (_) | |_|  _| | |  __/\__ \
# |____/ \___/ \__|_| |_|_|\___||___/
#
# Dotfiles and general mac terminal environment
# setup manager.
#
# Dotfiles
# ========
#
# The dotfiles are installed in the HOME directory using a
# bare git repository.
#
# Github repo: mhmorgan/dotfiles-mac
#
#
# Terminal Environment
# ====================
#
# This script helps with setup of the terminal environment,
# checking the status of the environment, and providing help
# information about the structure the environment.
#
# The DIRECTORIES hash defines all required directories
# along with a short description of their use.
#
# Git Repos
# ---------
#
# All git repositories for my projects are expected to
# be located in:
#
# 	$HOME/Documents


use 5.30.0;
use utf8;
use warnings;
use open qw(:std :utf8);
use strict;

use Getopt::Long;
use Pod::Usage;
use Term::ANSIColor qw(:constants);
use Term::ReadLine;

my $HOME        = $ENV{'HOME'};

my $LOG_DIR     = "$HOME/.dot-logs";
my $LOG_FNAME   = "$LOG_DIR/dot.log";
my $CONFIG_FILE = "$HOME/.dot.config";

mkdir $LOG_DIR, 0755 unless -d $LOG_DIR;

my $LOGFILES_REPO    = 'mhmorgan/dotfiles';
my $BOILERPLATES_URL = 'https://mhmorgan.github.io/boilerplates';
my $BP_FILES_URL     = $BOILERPLATES_URL . '/meta/filelist.txt';
my $DOT_SCRIPT_URL   = $BOILERPLATES_URL . '/mac/dot';
my $SKAP_SCRIPT_URL  = $BOILERPLATES_URL . '/scripts/skap.py';


#
# All directories required by the script, with a short description.
#
my %DIRECTORIES = (
	"$HOME/bin" =>
		'Personal scripts and binaries',
	"$HOME/lib" =>
		'Personal libraries',
);


#
# Mapping of name → url for scripts which should be
# downloaded and placed in the ~/bin directory.
#
my %SCRIPTS = (
	'dot' => $BOILERPLATES_URL . '/mac/dot',
	'skap' => $BOILERPLATES_URL . '/scripts/skap.py',
);


#
# Mapping of name → url for library files which should be
# downloaded and placed in the ~/lib directory.
#
my %LIBRARIES = (
	'common.pl' => $BOILERPLATES_URL . '/common.pl',
	'common.zsh' => $BOILERPLATES_URL . './common.zsh',
);


#
# Applications that should be installed on the system
# with Homebrew.
#
my @HOMEBREW_APPS = qw(
	python@3.10
	rust
	starship
	neovim
	thefuck
	fortune
	neofetch
	cowsay
	tmux
	lazygit
	pandoc
	gcc
	zsh-autosuggestions
	ipython
	tag
	java
	kotlin
	mhmorgan/commode
	mhmorgan/selector
);


#
# A map of all valid config keys and a getter for their
# respective default values.
#
my %CONFIG_VALUES = (
	IS_SUDO => sub {
		return confirm('Do you have sudo privileges?');
	},
	USE_GH  => sub {
		return confirm('Should GitHub CLI be used for the dotfiles repo?');
	},
);


################################################################################
# Utils
#{{{


# cmd_exists CMD → BOOL
#
# Check if the given shell command exists.
#
sub cmd_exists {
    my $cmd = shift;
    my $res = system "which $cmd &>/dev/null";
    $res == 0
}


# get_env NAME → STR
#
# Get an environment variable.
#
# If the variable doesn't exist it dies, unless a default value is given.
#
sub get_env {
    my $name = shift || die 'missing variable name. Stopping';
    my $val = $ENV{$name} || shift;
    $val or die "environment variable '$name' not found ✗\n";
    return $val;
}


# input PROMPT → STR
#
# Ask the user for a single line input with the PROMPT text.
#
sub input {
    my $prompt = shift || die 'missing prompt. Stopping';
    print italic("$prompt ");
    chomp(my $in = <STDIN>);
    $in
}


# confirm PROMPT → BOOL
#
# Ask the user to confirm the PROMPT question. " (Y/n)" is appended to the text.
#
sub confirm {
    my $prompt = shift || die 'missing prompt. Stopping';
    my $line = input($prompt . " (Y/n)");
	$line =~ /n(o|ei?)?/i ? 0 : 1
}


sub black     { BLACK     . "@_" . RESET }
sub red       { RED       . "@_" . RESET }
sub green     { GREEN     . "@_" . RESET }
sub yellow    { YELLOW    . "@_" . RESET }
sub blue      { BLUE      . "@_" . RESET }
sub magenta   { MAGENTA   . "@_" . RESET }
sub cyan      { CYAN      . "@_" . RESET }
sub white     { WHITE     . "@_" . RESET }
sub bold      { BOLD      . "@_" . RESET }
sub faint     { FAINT     . "@_" . RESET }
sub italic    { ITALIC    . "@_" . RESET }
sub underline { UNDERLINE . "@_" . RESET }

sub echo  { print STDOUT "@_\n"; }
sub eecho { print STDERR "@_\n"; }

sub vecho {
	our $VERBOSE;
	echo @_ if $VERBOSE;
}

sub err  { eecho red "[!!] @_"; }
sub info { echo "[*] @_"; }
sub emph { echo "[↑] @_"; }
sub good { echo green "[✓] @_"; }
sub bad  { echo red "[✗] @_"; }


# affirmative
#
# Print a random affirmatie word to inspire the user. Just for fun ☆
#
sub affirmative {
    my @words = (
		"Amazing", "Awesome", "Beautiful", "Brilliant", "Cool", "Delightful",
        "Exquisite", "Extraordinary", "Fabulous", "Fantastic", "Glorious",
        "Good", "Gracious", "Jazzed", "Marvelous", "Nice", "Right",
        "Sensational", "Sweet", "Terrific", "Unique ",
    );
    my $word = $words[rand @words];
    echo "$word ✓";
}


# header STR...
# 
# Print a header text with border with bold formatting.
# The formatting is removed if STDOUT isn't a terminal.
# 
sub header {
    my $txt = "@_";
    my $border = '=' x (length $txt);
    print BOLD if -t STDOUT;
    echo "\n$txt\n$border\n";
    print RESET if -t STDOUT;
}


$SIG{__DIE__} = sub {
    print STDERR RED if -t STDERR;
    print STDERR "[!!] @_";
    print STDERR RESET if -t STDERR;
    exit 1
};


$SIG{__WARN__} = sub { 
    print STDERR YELLOW if -t STDERR;
    print STDERR "[!] @_";
    print STDERR RESET if -t STDERR;
};


sub run {
	my $name = shift || die 'missing name. Stopping';
	my $cmd  = shift || die 'missing command. Stopping';

	my $log_name = lc($name =~ s/[ \/]/_/rg);
	my $run_log = "$LOG_DIR/$log_name.log";

	vecho "Run: $cmd";
	vecho "Log: $run_log";
	system($cmd . " 2>&1 | tee $run_log") == 0
		or die "$name failed.\n";
}
#}}}


################################################################################
# Config
#
# Stored configuration for dotfiles and environment setup.
#
# Content:
# 	IS_SUDO - True if the user has sudo privileges.
# 	USE_GH - True if GitHub CLI is OK to use.
#
#{{{

dbmopen(my %CONFIG, $CONFIG_FILE, 0644);


# config KEY -> VAL
#
# Get the config value associated with the given KEY.
#
sub config {
	my $key = shift || die 'missing key. Stopping';
	exists $CONFIG_VALUES{$key}
		or die "$key not a valid config key.\n";
	defined $CONFIG{$key}
		or $CONFIG{$key} = $CONFIG_VALUES{$key}();
	return $CONFIG{$key};
}
#}}}


################################################################################
# Install
#{{{

# Install the dotfiles and setup the terminal environment.
#
sub install {
	chdir $HOME or die $!;

	# - Install homebrew either as sudo-user or not.
	# - Add my personal tap to homebrew
	# - Install brew apps.
	# - Clone dotfiles bare repo.
	# - Install (checkout & setup) the repo.
	# - Install Vundle for vim
	# - Install/Download Dracula

	#1 Setup directory structure.
	fundamentals_setup();
	confirm 'Continue installation?' or return;

	#2 Install oh-my-zsh.
	install_oh_my_zsh();
	confirm 'Continue installation?' or return;

	#3 Install brew.
	homebrew_setup();
	confirm 'Continue installation?' or return;

	#4 Install brew applications.
	#5 Install dotfile repo (gh or git).
	#6 Clone/install dracula theme.
	#7 Download & install FiraCode nerd font
}


#
# Install Oh-my-zsh on the system, unless it's already installed.
#
sub install_oh_my_zsh {
	cmd_exists 'git';

	my $dir = "$HOME/.oh-my-zsh";
	my $cmd = 'sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"';

	header "Oh-my-zsh";
	run("Oh-my-zsh Installation", $cmd) unless -d $dir;
	good "Already installed!" if -d $dir;
}


#
# Install the fundamentals of the setup:
# Create the required directories and install personal 
# scripts and libarires.
#
sub fundamentals_setup {
	header "Fundamentals";

	# Directories
	chdir $HOME or die $!;
	for (keys %DIRECTORIES) {
		if ( -d ) {
			good qq(Directory "$_" already exists!);
			next;
		}
		info qq(Making directory "$_");
		mkdir $_, 0755 or die $!;
	}

	# Scripts
	chdir "$HOME/bin" or die $!;
	for (keys %SCRIPTS) {
		if ( -f ) {
			good qq(Script "$_" already exists!);
			next;
		}
		my $url = $SCRIPTS{$_};
		info qq(Installing script "$_");
		system("curl -s $url > $_") == 0
			or die "Installation failed. Stopping";
	}

	# Libraries
	chdir "$HOME/lib" or die $!;
	for (keys %LIBRARIES) {
		if ( -f ) {
			good qq(Library "$_" already exists!);
			next;
		}
		my $url = $LIBRARIES{$_};
		info qq(Installing library "$_");
		system("curl -s $url > $_") == 0
			or die "Installation failed. Stopping";
	}
}


sub homebrew_setup {
	chdir $HOME or die $!;
	header 'Homebrew';

	# Install homebrew
	if (cmd_exists('brew')) {
		good 'Already installed!';
	} else {
		my $cmd = config('IS_SUDO') ?
			'/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"' :
			'mkdir homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C homebrew';
		run('Homebrew Installation', $cmd);
	}

	my $tap = 'mhmorgan/top';
	if (qw{ brew tap } =~ $tap) {
		good qq(Tap "$tap" already added!);
	} else {
		info qq(Adding tap "$tap");
	}
}
#}}}


################################################################################
# Doctor
#{{{

# Sanity checks for the dotfiles and terminal environment.
sub doctor {
	header "External resources";

	info "Checking $DOT_SCRIPT_URL";
	if (url_not_found($DOT_SCRIPT_URL)) {
		bad "Dot script not found.";
	} else {
		good "Dot script found.";
	}
	
	#- Check directory structure.
	#- Check installed scripts.
	#- Check installed libraries.
	#- Check if Oh-my-zsh is installed.
	#- Check if dotfiles are properly installed.
	#- Check if homebrew is installed.
}


sub url_not_found {
	my $url = shift || die 'missing url. Stopping';
	$_ = qx{ curl -sI $url | head -n1 };
	chomp;
	/HTTP.. 404/ ? 1 : 0
}
#}}}


################################################################################
# Main
#{{{

my $MAN = 0;
my $HELP = 0;
my $VERBOSE = 0;

GetOptions(
	'help|h' => \$HELP,
	'verbose|v' => \$VERBOSE,
	'man' => \$MAN
) or pod2usage(2);

pod2usage( -exitval  => 0,
           -verbose  => 2) if $MAN;
pod2usage( -verbose  => 99,
           -sections => "SYNOPSIS|Commands|OPTIONS")
if $HELP || !(scalar @ARGV);

sub main {
    my $cmd = shift;
    my $args = join '", "', @_;
    my @res = eval "$cmd(\"$args\")";
	say "@res" if @res;
}

main(@ARGV);
#}}}

__END__

################################################################################
# Documentation
#{{{

# TODO

#}}}
