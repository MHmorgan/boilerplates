#!/usr/bin/env perl
#
#  ____                   
# |  _ \ ___   __ _ _   _ 
# | |_) / _ \ / _` | | | |
# |  _ < (_) | (_| | |_| |
# |_| \_\___/ \__, |\__,_|
#             |___/       
# 
# Personal assistant on mac systems.
#
# Design Philosophy
# =================
#
# Command Types
# -------------
#
# Action Commands
#   These types of commands should perform actions,
#   primarily, and should limit output printing to a minimum.
#
#   The goal is not to hide any actions performed by Rogu,
#   but only *performed* actions should logged, not the
#   absence of action (unless it's an error).
#   However, do not print information which is duplicated by
#   any information commands: don't report if anything is
#   previously installed, don't report success (absence of
#   error implies success).
#
# Information Commands
#   These types of commands should print information to the
#   user.

use 5.30.0;
use utf8;
use warnings;
use strict;
use open qw(:std :utf8);

BEGIN {
    unless ( -f "$ENV{HOME}/lib/common.pm") {
        system("mkdir -p $ENV{HOME}/lib") == 0
            or die;
        system("curl -sSL https://mhmorgan.github.io/boilerplates/common.pm -o $ENV{HOME}/lib/common.pm") == 0
            or die;
    }
    push @INC, "$ENV{HOME}/lib";
}

use Getopt::Long;
use Pod::Usage;
use common;

#
# Application directories
#
our $HOME       = $ENV{"HOME"};
our $CACHE_DIR  = "$HOME/.cache/rogu";
our $CONF_DIR   = "$HOME/.config/rogu";
our $DATA_DIR   = "$HOME/.local/share/rogu";
our $TMP_DIR    = "/tmp/rogu";

#
# Application files
#
our $USER_CONF_FILE = "$CONF_DIR/rogu.conf";
our $APP_DATA_FILE  = "$DATA_DIR/rogu-data";
our $APP_CACHE_FILE = "$CACHE_DIR/rogu-cache";

#
# Oh-my-zsh parameters
#
our $OHMY_SCRIPT_URL = "https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh";
our $OHMY_DIR        = "$HOME/.oh-my-zsh";

#
# Dotfiles parameters
#
our $DOT_REPO   = "https://github.com/MHmorgan/dotfiles-mac.git";
our $DOT_DIR    = "$HOME/.dotfiles";
our $DOT_BRANCH = "main";

#
# Unified naming of common steps
#
our $TITLE_ROGU            = 'Rogu 👽';
our $TITLE_COMMON          = 'Common library 📚';
our $TITLE_OH_MY_ZSH       = 'Oh-my-zsh 🖥';
our $TITLE_DOTFILES        = 'Dotfiles ⚙️';
our $TITLE_HOMEBREW        = 'Homebrew 🍺';
our $TITLE_BREW_APPS       = 'Brew-apps 🍻';
our $TITLE_GET_TARGETS     = 'Get-targets 🔧';
our $TITLE_INSTALL_TARGETS = 'Install-targets 🔧';

#
# Other global parameters
#
our $DEFAULT_EDITOR = 'vi';
our $DEFAULT_PAGER  = 'less';

our $ROGU_URL    = "https://raw.githubusercontent.com/MHmorgan/boilerplates/main/mac/rogu";
our $ROGU_PATH   = "$HOME/bin/rogu";
our $COMMON_URL  = "https://raw.githubusercontent.com/MHmorgan/boilerplates/main/common.pm";
our $COMMON_PATH = "$HOME/lib/common.pm";

our $ALL;
our $DEBUG;
our $FIX;
our $QUIET;


################################################################################
# Utils
#{{{

# Remove any leading and trailing whitespace
#
sub trim { my $str = shift; $str =~ s/^\s+|\s+$//gr }


# Return true if the user has sudo privileges.
# Stolen from Homebrew's install script.
#
sub user_can_sudo {
    qx{ command -v sudo } or return 0;
    system q(! LANG= sudo -n -v 2>&1 | grep -q "may not run sudo");
    $? == 0 ? 1 : 0
}


# Have a user select values of a list, returning
# the modified list.
#
sub list_select {
    my ($desc, @values) = @_;
    if ($ALL) {
        info "Returning all values: " . join(' ', @values) if $DEBUG;
        return @values;
    }

    my $tmp_file = "/tmp/rogu/" . time;
    info "Temp select file: $tmp_file" if $DEBUG;
    open(my $fh, ">", $tmp_file) or die $!;
    say $fh "# $desc";
    say $fh join("\n", @values);
    close $fh;

    my $editor = $ENV{'EDITOR'} // $DEFAULT_EDITOR;
    system "$editor $tmp_file";
    open($fh, "<", $tmp_file) or die $!;
    my @new_values;
    while (<$fh>) {
        chomp;
        next if /^(#|\s*%)/;
        push @new_values, $_;
    }
    close $fh;
    unlink $tmp_file;

    info "Selected values: " . join(' ', @new_values) if $DEBUG;
    return @new_values;
}


sub run {
    my $cmd = shift;
    say "[>] $cmd" unless $QUIET;
    system $cmd;
    return $? == 0;
}


sub fetch_url {
    my $url = shift;
    my %resp;

    if (exists $::RUN_CACHE{$url}) {
        info "Cache hit fetch $url" if $DEBUG;
        return %{$::RUN_CACHE{$url}};
    }

    $resp{body} = qx{ curl -sSL $url }
        or die "GET $url failed";

    my @head = qx{ curl -sSLI $url }
        or die "HEAD $url failed";
    for (@head) {
        chomp;
        if (/HTTP\/\d \d{3}/) {
            $resp{status} = $_;
        } elsif (/^([^:]+): (.+)$/) {
            $resp{$1} = $2;
        }
    }

    $::RUN_CACHE{$url} = \%resp;
    return %resp;
}


# Returns a path to a local cache of the file located
# at the given $url.
#
sub get_file_cache {
    my $url = shift;
    my $key = "Cache $url";
    if (exists $::RUN_CACHE{$key}) {
        info "Cache hit cache $url" if $DEBUG;
        return $::RUN_CACHE{$key};
    }

    my %resp = fetch_url $url;
    my $name = $url =~ s/[\/:]+/_/rg;
    my $path =  "$CACHE_DIR/$name";

    info "Caching $url @ $path" if $DEBUG;
    open(my $fh, ">", $path) or die $!;
    print $fh $resp{body};
    close $fh;

    $::RUN_CACHE{$key} = $path;
    return $path;
}


# Returns true if the given $url is valid.
#
sub is_valid_url {
    my $url = shift;
    my %resp = fetch_url $url;
    $resp{status} =~ /HTTP.. 2\d\d/ ? 1 : 0
}


# Returns true if the text file in at $url is different
# from the text file at $path.
#
sub is_different {
    my ($url, $path) = @_;
    my $fcache = get_file_cache $url;
    qx{ diff -q $fcache $path };
    $? == 0 ? 0 : 1
}
#}}}


################################################################################
# Configurations
#
# User data configuration routines.
#
# The user configuration data structure looks like:
#
# {
#     <section name> => {
#         'DIR' => <workdir>
#         'RUN' => <command>
#         'CHECK => <command>
#         'DATA' => ( <list of data lines> )
#     }
# }
#
# Where all subsections are optional and may be undef.
#
#{{{


sub config {
    $_ = shift || die "Missing subcommand ✗\n";
    return conf_print(\%::CONF)    if /print/;
    return conf_validate(\%::CONF) if /validate/;
    die "Unknown subcommand: $_ 🚫\n";
}


# Read and parse the given file into the user configuration data
# structure.
#
sub conf_read {
    my ($fname) = @_;

    my $text;
    open(my $cfile, "<", $fname) or die qq(opening "$fname": $!);
    while (<$cfile>) {
        # Skip empty lines and comments
        next if /^(#(?!!).*|\s*)$/;
        # Remove leading whitespace and escaped newlines
        s/\\\n//g;
        $text .= $_;
    }
    close $cfile;

    my %conf;
    my $sect;
    for (split /\n/, $text) {
        #
        # New section with optional work directory.
        #
        if (/^\[(.*?(@(.*))?)\]/) {
            $sect = {};
            $conf{trim($1)} = $sect;
            if (defined $3) {
                $sect->{'DIR'} = trim($3 =~ s/~/$HOME/r);
            }
        }
        #
        # Non-data content of a section.
        #
        elsif (/^([A-Z]+): (.*)$/) {
            $sect->{$1} = trim($2);
        }
        #
        # Data content of a section.
        #
        else {
            push @{$sect->{'DATA'}}, trim($_);
        }
    }

    return %conf;
}


# Print the given user config data structure.
#
sub conf_print {
    my ($conf) = @_;

    if (!$conf) {
        say "<empty config>";
        return
    }

    for my $name (sort keys %{$conf}) {
        header $name;
        my $sect = $conf->{$name};
        for (keys %{$sect}) {
            say bold "$_:";
            my $val = $sect->{$_};
            if (ref($val) =~ m/ARRAY/) {
                say join("\n", @{$val});
            } else {
                say $val;
            }
        }
    }
}

# Validates the sections and subsections of the given user
# configuration data.
#
sub conf_validate {
    my ($conf) = @_;

    my %sections = (
        Get         => [ 'DIR', 'DATA' ],
        Install     => [ 'DIR', 'DATA', 'CHECK' ],
        Homebrew    => [ 'DATA' ]
    );

    for my $sec_name (keys %{$conf}) {
        $sec_name =~ /^(\w+)/;
        my $sec_type = $1;
        #
        # Validate section type.
        #
        unless (exists $sections{$sec_type}) {
            say red qq/($sec_name) Unknown section type "$sec_type"/;
            next;
        }
        my %subsec = %{$conf->{$sec_name}};
        #
        # Validate subsections.
        #
        my %sec_cnt;
        $sec_cnt{$_} += 1 for @{$sections{$sec_type}};
        $sec_cnt{$_} -= 1 for keys %{$conf->{$sec_name}};
        while (my ($sec, $cnt) = each %sec_cnt) {
            say yellow qq/($sec_name) Missing subsection "$sec"/
                if $cnt == 1;
            say yellow qq/($sec_name) Unknown subsection "$sec"/
                if $cnt == -1;
        }
        #
        # Check directory existence
        #
        if (exists $subsec{DIR}) {
            my $dir = $subsec{DIR};
            say yellow qq/($sec_name) Directory not found "$dir"/
                unless -d $dir;
        }
    }
}


# Return an array of arrays with all the Get files.
# Each file is represented with an array on the format:
#   [ URL, PATH, MODE ]
#
sub conf_get_files {
    my @files;
    while (my ($section, $content) = each %::CONF) {
        next unless $section =~ /^Get /;
        my $dir = $content->{DIR} // $HOME;
        my @data = @{$content->{DATA}};
        for (@data) {
            /^
                (\S+?) # Starts with URL
                (\s*\((.*?)\))? # Optionally (name)
                (\s*\[(.*?)\])? # Optionally [mode]
            $/x;
            my $url = $1;
            my $mode = oct($5 // '0644');
            my $name = $3 // $url =~ s/.*\///r;
            push @files, [$url, "$dir/$name", $mode];
        }
    }
    return @files;
}


# Run the CHECK command for a given target, returning true
# if the check passes.
#
sub conf_install_check {
    my ($name) = @_;
    $name //= $_;
    unless (exists $::CONF{$name}) {
        die "Target [$name] not found";
    }
    info "Running CHECK for [$name]" if $DEBUG;
    chdir $::CONF{$name}->{DIR} or return 0;
    my $check = $::CONF{$name}->{CHECK} // return 0;
    system $check;
    $? == 0 ? 1 : 0
}


# Run the code for the given Install target.
#
sub conf_install_install {
    my $name = shift;
    $name //= $_;
    unless (exists $::CONF{$name}) {
        die "Target [$name] not found.";
    }
    info "Running script for [$name]" if $DEBUG;
    chdir $::CONF{$name}->{DIR} or die $!;
    my @lines = @{$::CONF{$name}->{DATA}}
        // die "No DATA for [$name]";
    system(join "\n", @lines) == 0 or die;
}
#}}}


################################################################################
# Oh-my-zsh
#{{{


# Return the root directory for the Oh-my-zsh installation
# or undef if it cannot be found.
#
sub ohmy_root { -d $OHMY_DIR ? $OHMY_DIR : undef }


# Return a list of all custom plugins/themes for Oh-my-zsh.
#
sub ohmy_custom {
    my @vals;
    my $root = ohmy_root() // return @vals;
    chdir "$root/custom" || die $!;

    while (<plugins/* themes/*>) {
        next if /example/;
        push @vals, $_;
    }
    return @vals;
}
#}}}


################################################################################
# Dotfiles
#{{{


# Return the root directory for the dotfiles repo, or undef
# if it cannot be found.
#
sub dot_root { -d $DOT_DIR ? $DOT_DIR : undef }


# Return the git command needed to interact with the
# dotfiles repo.
#
sub dot_git {
    my $root = dot_root() // return undef;
    return "git --git-dir=$root --work-tree=$HOME";
}


# Return a list of all tracked dotfiles.
#
sub dot_files {
    my @files;
    my $git = dot_git() // return @files;
    chdir() or die $?;
    @files = qx{ $git ls-tree -r --name-only $DOT_BRANCH }
        or die "ls-tree failed";
    chomp(@files);
    return @files;
}
#}}}


################################################################################
# Homebrew
#{{{
#}}}


################################################################################
# Install
#
# The installation does the following:
#
# - Clones and installs my dotfiles from github.
# - Installs homebrew, adds taps and installs brew applications.
# - Runs 'Install' config tasks
# - Runs 'Get' config tasks
#
#{{{

sub install {
    qx{ which git } or die "Git is not installed!\n";
    qx{ which zsh } or die "Zsh is not installed!\n";

    my @steps = (
        $TITLE_OH_MY_ZSH,
        $TITLE_DOTFILES,
        # $TITLE_HOMEBREW,
        $TITLE_GET_TARGETS,
        $TITLE_INSTALL_TARGETS,
    );
    @steps = list_select "Remove any installation steps to skip.", @steps;

    my $run_install = sub {
        my ($name, $func) = @_;
        return unless grep /$name/, @steps;
        emph "Running install $name" unless $QUIET;
        &$func();
        sleep 1;
    };

    &$run_install($TITLE_OH_MY_ZSH, \&inst_oh_my_zsh);
    &$run_install($TITLE_DOTFILES, \&inst_dotfiles);
    &$run_install($TITLE_HOMEBREW, \&inst_homebrew);
    &$run_install($TITLE_GET_TARGETS, \&inst_get_targets);
    &$run_install($TITLE_INSTALL_TARGETS, \&inst_install_targets);
}


# Install Oh My Zsh, unless it is already installed.
#
sub inst_oh_my_zsh {
    return if defined ohmy_root;

    chdir() or die $!;
    run qq(sh -c "RUNZSH=no \$(curl -fsSL $OHMY_SCRIPT_URL)") or die;

    defined ohmy_root
        or die "Oh-my-zsh installation not found ⚠️";

    my $backup = '.zshrc.pre-oh-my-zsh';
    if (-e $backup) {
        say qq(Looks like oh-my-zsh has moved your ".zshrc" to "$backup");
        run "mv $backup .zshrc" if confirm "Do you want to undo this?";
    }
}


sub inst_dotfiles {
    return if defined dot_root;

    chdir() or die $!;
    run "git clone --bare $DOT_REPO $DOT_DIR" or die;

    info "Creating backup of existing dotfiles.";
    for (dot_files) {
        run "mv $_ $_~" if -e;
    }

    my $git = dot_git;
    run "$git checkout $DOT_BRANCH" or die;
    run "$git config advice.addIgnoredFile false";
    run "$git config branch.$DOT_BRANCH.remote origin";
    run "$git config branch.$DOT_BRANCH.merge refs/heads/$DOT_BRANCH";
}


sub inst_homebrew {

    my $data = $::CONF{'Homebrew Apps'}{'DATA'}
        // [ "# (No Homebrew apps defined in user config)" ];

    my @apps = list_select(
        "Select which homebrew applications to install.",
        @{$data}
    );
    say join "\n", @apps;

    ... #TODO install Homebrew (new mac)
}


sub inst_get_targets {
    for (conf_get_files) {
        my ($url, $path, $mode) = @{$_};
        next if -f $path;

        my $parent = $path =~ s/\/[^\/]+$//r;
        run "mkdir -p $parent" unless -d $parent;
        run "curl -sSL $url -o $path" or die;
        chmod $mode, $path;
    }
}


sub inst_install_targets {
    for (grep /^Install/, keys %::CONF) {
        conf_install_install unless conf_install_check;
    }
}
#}}}


################################################################################
# Uninstall
#
# Does everything inverse of what the Install
# operations does.
#
#{{{

sub uninstall {
    my @steps = (
        $TITLE_OH_MY_ZSH,
        $TITLE_DOTFILES,
        # $TITLE_HOMEBREW,
        $TITLE_GET_TARGETS,
    );
    @steps = list_select "Remove any uninstallation steps to skip.", @steps;

    my $run_uninstall = sub {
        my ($name, $func) = @_;
        return unless grep /$name/, @steps;
        emph "Running uninstall $name" unless $QUIET;
        &$func();
        sleep 1;
    };

    &$run_uninstall($TITLE_OH_MY_ZSH, \&unin_oh_my_zsh);
    &$run_uninstall($TITLE_DOTFILES, \&unin_dotfiles);
    &$run_uninstall($TITLE_HOMEBREW, \&unin_homebrew);
    &$run_uninstall($TITLE_GET_TARGETS, \&unin_get_targets);
}


sub unin_oh_my_zsh {
    my $root = ohmy_root()
        // die "Oh-my-zsh is not installed ⚠️\n";

    my @custom = ohmy_custom;
    if (@custom) {
        warn "You have custom plugins/themes\n";
        say " - $_" for @custom;
        return if confirm "Abort uninstallation of oh-my-zsh?";
    }

    run "rm -rf $root" or die;
}


sub unin_dotfiles {
    my $root = dot_root()
        // die "Dotfiles is not installed ⚠️";
    my @dotfiles = dot_files;

    run "rm -rf $root" or die;

    if (@dotfiles) {
        say "Dotfiles:";
        say "  $_" for @dotfiles;
        if (confirm "Do you want to delete your dotfiles?") {
            run "rm $_" for @dotfiles;
        }
    }
}


sub unin_homebrew {
    confirm yellow "Are you suuure you want to uninstall Homebrew?"
        or return;
    confirm yellow bold "Are you 100% absolutely definetly positively sure you want to uninstall Homebrew?"
        or return;

    ... #TODO uninstall Homebrew (new mac)
}


sub unin_get_targets {
    for (conf_get_files) {
        my ($url, $path) = @{$_};
        next unless -f $path;
        run "rm $path" or die;
    }
}
#}}}


################################################################################
# Update
#
# Functionality for updating resources Rogu knows about:
#   - Rogu self
#   - Homebrew (apps)
#   - Dotfiles repo
#   - Get files
#{{{

sub update {
    my $filter = shift;

    my $run_update = sub {
        my ($name, $func) = @_;
        if ($filter) {
            return if $name !~ /$filter/i;
        }
        emph "Running update $name" unless $QUIET;
        &$func();
        sleep 1;
    };

    &$run_update($TITLE_ROGU, \&updt_rogu);
    &$run_update($TITLE_COMMON, \&updt_common);
    &$run_update($TITLE_DOTFILES, \&updt_dotfiles);
    &$run_update($TITLE_HOMEBREW, \&updt_homebrew);
    &$run_update($TITLE_GET_TARGETS, \&updt_get_targets);
}


sub updt_rogu {
    is_valid_url($ROGU_URL) or die "Invalid script URL: $ROGU_URL ⛔️";
    return unless is_different($ROGU_URL, $ROGU_PATH);
    run "curl -sSL $ROGU_URL -o $ROGU_PATH" or die;
}


sub updt_common {
    is_valid_url($COMMON_URL) or die "Invalid file URL: $COMMON_URL ⛔️";
    return unless is_different($COMMON_URL, $COMMON_PATH);
    run "curl -sSL $COMMON_URL -o $COMMON_PATH" or die;
}


sub updt_dotfiles {
    is_valid_url $DOT_REPO or die "Invalid repo URL: $DOT_REPO ⛔️";
    defined(dot_root) or die "Dotfiles not installed 🚫";

    chdir() or die $!;
    my $git = dot_git;
    qx{ $git status --short } eq '' or die "Dotfiles are dirty ⛔️";
    run "$git pull --rebase origin main" or die;
}


sub updt_homebrew {
    cmd_exists "brew" or die "Homebrew isn't installed ⛔️";
    run "brew update -q && brew upgrade -q" or die;
}


sub updt_get_targets {
    for (conf_get_files) {
        my ($url, $path, $mode) = @{$_};
        is_valid_url($url) or die "Invalid URL: $url ⛔️";
        next unless is_different($url, $path);
        run "curl -sSL $url -o $path" or die;
        chmod $mode, $path;
    }
}
#}}}

################################################################################
# Doctor
#{{{

sub doctor {
    my $filter = shift;

    my $run_doctor = sub {
        my ($name, $func) = @_;
        if ($filter) {
            return if $name !~ /$filter/i;
        }
        header $name;
        &$func();
        sleep 1;
    };

    &$run_doctor($TITLE_ROGU, \&doc_rogu);
    &$run_doctor($TITLE_COMMON, \&doc_common);
    &$run_doctor($TITLE_OH_MY_ZSH, \&doc_oh_my_zsh);
    &$run_doctor($TITLE_DOTFILES, \&doc_dotfiles);
    &$run_doctor($TITLE_HOMEBREW, \&doc_homebrew);
    &$run_doctor($TITLE_GET_TARGETS, \&doc_get_targets);
    &$run_doctor($TITLE_INSTALL_TARGETS, \&doc_install_targets);
}


sub doc_rogu {
    unless (is_valid_url $ROGU_URL) {
        say red "Invalid script URL 🚫";
    } elsif (is_different $ROGU_URL, $ROGU_PATH) {
        say yellow "Rogu has pending updates ⚠️";
        updt_rogu() if $FIX;
    } else {
        say green "Everything is OK 👍";
    }
}


sub doc_common {
    unless (is_valid_url $COMMON_URL) {
        say red "Invalid file URL 🚫";
    } elsif (is_different $COMMON_URL, $COMMON_PATH) {
        say yellow "Common.pm has pending updates ⚠️";
        updt_common if $FIX;
    } else {
        say green "Everything is OK 👍";
    }
}


sub doc_oh_my_zsh {
    unless (is_valid_url $OHMY_SCRIPT_URL) {
        say red "Install script URL is invalid 🚫";
    }

    my $root = ohmy_root;
    unless (defined $root) {
        say red "Oh-my-zsh isn't installed 👎";
        inst_oh_my_zsh if $FIX;
        return;
    }
    say green "Oh-my-zsh is installed 👍";

    my @custom = ohmy_custom;
    if (@custom) {
        say "You have " . scalar @custom . " custom plugins/themes:";
        say "  $_" for @custom;
    }
}


sub doc_dotfiles {
    unless (is_valid_url $DOT_REPO) {
        say red "Dotfiles repo URL is invalid 🚫";
    }

    my $root = dot_root;
    unless (defined $root) {
        say red "Dotfiles isn't installed 👎";
        inst_dotfiles if $FIX;
        return;
    }
    say green "Dotfiles is installed 👍";

    chdir() or die $!;
    my $git = dot_git;
    my $status = qx{ $git status --short };
    my $diff = qx{ $git fetch -q origin main && $git diff HEAD...FETCH_HEAD };

    if ($status ne '') {
        say red "Dotfiles are dirty ⛔️";
        system "$git status";
    } elsif ($diff ne '') {
        say yellow "Dotfiles has pending updates ⚠️";
        updt_dotfiles if $FIX;
    }
}


sub doc_homebrew {
    unless (cmd_exists "brew") {
        say red "Homebrew isn't installed 👎";
        #inst_homebrew if $FIX;
        return;
    }
    say green "Homebrew is installed 👍";
    system "brew info";

    my $run_install;
    my @apps = @{$::CONF{'Homebrew Apps'}{DATA}};
    my @installed = grep /^\w+/, qx{ brew list -1 };
    for (@apps) {
        unless (grep $_, @installed) {
            say yellow "Not installed: $_";
            $run_install = 1;
        }
    }
    #inst_homebrew if $FIX && $run_install;
}


sub doc_get_targets {
    my $install;
    my $update;
    my @files = conf_get_files;
    for (conf_get_files) {
        my ($url, $path, $mode) = @{$_};
        if ( -f $path ) {
            say "Installed: $path";
        } else {
            say yellow "Not installed: $path";
            $install = 1;
        }

        unless (is_valid_url $url) {
            say red "Invalid URL: $url ⛔️";
        } elsif (is_different $url, $path) {
            say yellow "Update pending: $path ⚠️";
            $update = 1;
        }
    }
    if ($FIX) {
        inst_get_targets if $install;
        updt_get_targets if $update && !$install;
    }
}


sub doc_install_targets {
    my $install;
    my @targets = grep /^Install/, keys %::CONF;
    for (@targets) {
        my $installed = conf_install_check $_;
        if ($installed) {
            say qq(Installed: [$_]);
        } else {
            say yellow qq(Not installed: [$_]);
            $install = 1;
        }
    }
    inst_install_targets if $install && $FIX;
}
#}}}


################################################################################
# Main
#{{{

for ($CACHE_DIR, $CONF_DIR, $DATA_DIR, $TMP_DIR) {
    system "mkdir -p $_" unless -d;
    $? == 0 or die $!;
}

# DATA should be used to store data on disk, which
# is needed for the functionality of Rogu.
dbmopen(our %DATA, $APP_DATA_FILE, 0644);

# CACHE should be used to cache data on disk, which needs
# to be stored between runs, and improves performance.
dbmopen(our %CACHE, $APP_CACHE_FILE, 0644);

# RUN_CACHE should be used to cache data in memory, which
# is needed to improve performance.
our %RUN_CACHE;

# CONF is the user configuration, and is treated
# as read-only by Rogu.
our %CONF;
if (-f $USER_CONF_FILE) {
    %CONF = conf_read $USER_CONF_FILE;
}

# Rogu is only intended to be used interactively, so
# don't bother with using both STDERR and STDOUT.
# The output shouldn't be redirected anyway.
set_log_out(*STDOUT);

sub usage {
    print for (<DATA>);
    exit 1;
}

my $HELP;
GetOptions(
    'help|h'  => \$HELP,
    'debug|d' => \$DEBUG,
    'quiet|q' => \$QUIET,
    'all'     => \$ALL,
    'fix'     => \$FIX,
) or usage;
usage if ($HELP || !(scalar @ARGV));

my $CMD = shift;
my $ARGS = join '", "', @ARGV;
my @RES = eval "$CMD(\"$ARGS\")";
if ($DEBUG && @RES) {
    say for (@RES);
}
#}}}


__DATA__
Usage: rogu [options] <command> [args...]

Roger's weird offspring.

Commands:
    doctor [--fix] [FILTER]
            Run an sanity check of everything Rogu knows
            about on the system. This is mostly a passive
            action, but not completely.

            The optional FILTER allows filtering on which
            sanity checks are performed, selecting on title.

            When --fix is given Rogu tries to fix any issues
            as soon as it is encountered, if he knows how.

    update [FILTER]
            Update anything that needs updates.

            The optional FILTER allows filtering which updates
            are performed.

    install
            Install everything needed to use the system (at
            least everything Rogu knows about).

            The user is guided through the installation and
            allowed to select which installation steps to run.

    uninstall
            Uninstall most of the things that Rogu knows how
            to handle.

            The user is guided through the uninsntallation
            and allowed to select which uninstallation
            steps to run.

    config <cmd>
            User configuration actions.

            Subcommands: print, validate.


Options:
    --all   Always select all options by default.
    --help  Print a brief help message and exits.
    --quiet Print less output.
